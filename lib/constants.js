'use strict';

module.exports = {
	multiChannelNodeIdOne: { multiChannelNodeId: 1 },
	multiChannelNodeIdTwo: { multiChannelNodeId: 2 },
	multiChannelNodeIdThree: { multiChannelNodeId: 3 },
	multiChannelNodeIdFour: { multiChannelNodeId: 4 },
	capabilities: {
		dim: 'dim',
		onoff: 'onoff',
		lightHue: 'light_hue',
		lightMode: 'light_mode',
		meterPower: 'meter_power',
		powerFactor: 'powerFactor',
		measurePower: 'measure_power',
		powerReactive: 'powerReactive',
		measureVoltage: 'measure_voltage',
		measureCurrent: 'measure_current',
		lightTemperature: 'light_temperature',
		lightSaturation: 'light_saturation',
		meterPowerImport: 'meter_power.import',
		meterPowerExport: 'meter_power.export',
		targetTemperature: 'target_temperature',
		powerTotalReactive: 'powerTotalReactive',
		powerTotalApparent: 'powerTotalApparent',
		measureTemperature: 'measure_temperature',
		offAutoThermostatMode: 'offAutoThermostatMode',
		windowCoveringsTiltSet: 'windowcoverings_tilt_set',
	},
	deviceClassGeneric: {
		sensorMultilevel: 'GENERIC_TYPE_SENSOR_MULTILEVEL',
		sensorBinary: 'GENERIC_TYPE_SENSOR_BINARY',
		switchBinary: 'GENERIC_TYPE_SWITCH_BINARY',
		sensorNotification: 'GENERIC_TYPE_SENSOR_NOTIFICATION',
		switchMultilevel: 'GENERIC_TYPE_SWITCH_MULTILEVEL',
		thermostat: 'GENERIC_TYPE_THERMOSTAT',
	},
	commandClasses: {
		meter: 'METER',
		notification: 'NOTIFICATION',
		sensorBinary: 'SENSOR_BINARY',
		switchBinary: 'SWITCH_BINARY',
		switchColor: 'SWITCH_COLOR',
		thermostatMode: 'THERMOSTAT_MODE',
		switchMultilevel: 'SWITCH_MULTILEVEL',
		sensorMultilevel: 'SENSOR_MULTILEVEL',
		notificationReport: 'NOTIFICATION_REPORT',
		thermostatSetpoint: 'THERMOSTAT_SETPOINT',
		sensorBinaryReport: 'SENSOR_BINARY_REPORT',
		commands: {
			meterReset: 'METER_RESET',
		},
	},
	flows: {
		allOn: 'allOn',
		allOff: 'allOff',
		resetMeter: 'resetMeter',
		inputOneToggled: 'inputOneToggled',
		inputOneTurnedOn: 'inputOneTurnedOn',
		inputOneTurnedOff: 'inputOneTurnedOff',
		inputTwoToggled: 'inputTwoToggled',
		inputTwoTurnedOn: 'inputTwoTurnedOn',
		inputTwoTurnedOff: 'inputTwoTurnedOff',
		inputThreeToggled: 'inputThreeToggled',
		inputThreeTurnedOn: 'inputThreeTurnedOn',
		inputThreeTurnedOff: 'inputThreeTurnedOff',
	},
	inputMap: {
		1: {
			inputId: 1,
			flowTriggers: {
				on: 'inputOneTurnedOn',
				off: 'inputOneTurnedOff',
				toggle: 'inputOneToggled',
			},
		},
		2: {
			inputId: 2,
			flowTriggers: {
				on: 'inputTwoTurnedOn',
				off: 'inputTwoTurnedOff',
				toggle: 'inputTwoToggled',
			},
		},
		3: {
			inputId: 3,
			flowTriggers: {
				on: 'inputThreeTurnedOn',
				off: 'inputThreeTurnedOff',
				toggle: 'inputThreeToggled',
			},
		},
	},
	settings: {
		allOn: 'allOn',
		allOff: 'allOff',
		autoOff: 'autoOff',
		autoOffQ1: 'autoOffQ1',
		autoOffQ2: 'autoOffQ2',
		antifreeze: 'antifreeze',
		workingMode: 'workingMode',
		dimDuration: 'dimDuration',
		enableInput1: 'enableInput1',
		enableInput2: 'enableInput2',
		enableInput3: 'enableInput3',
		restoreStatus: 'restoreStatus',
		operatingMode: 'operatingMode',
		setpointInput2: 'setpointInput2',
		setpointInput3: 'setpointInput3',
		minimumDimValue: 'minimumDimValue',
		maximumDimValue: 'maximumDimValue',
		motorMovingTime: 'motorMovingTime',
		slatsTiltingTime: 'slatsTiltingTime',
		antifreezeEnabled: 'antifreezeEnabled',
		powerReportDelayTime: 'powerReportDelayTime',
		setpointInput2Enabled: 'setpointInput2Enabled',
		setpointInput3Enabled: 'setpointInput3Enabled',
		tooLowTemperatureLimit: 'tooLowTemperatureLimit',
		tooHighTemperatureLimit: 'tooHighTemperatureLimit',
		temperatureSensorOffset: 'temperatureSensorOffset',
		motorOperationDetection: 'motorOperationDetection',
		temperatureHysteresisOn: 'temperatureHysteresisOn',
		temperatureHysteresisOff: 'temperatureHysteresisOff',
		delayBetweenMotorMovement: 'delayBetweenMotorMovement',
		temperatureHeatingHysteresisOn: 'temperatureHeatingHysteresisOn',
		temperatureCoolingHysteresisOn: 'temperatureCoolingHysteresisOn',
		autoSceneModeTransitionDuration: 'autoSceneModeTransitionDuration',
		temperatureHeatingHysteresisOff: 'temperatureHeatingHysteresisOff',
		temperatureCoolingHysteresisOff: 'temperatureCoolingHysteresisOff',
		multiChannelReportingConfigured: 'multiChannelReportingConfigured',
		temperatureSensorReportingThreshold: 'temperatureSensorReportingThreshold',
		autoSceneModeTransitionDurationUnit: 'autoSceneModeTransitionDurationUnit',
		size: {
			allOnAllOff: 2,
		},
		index: {
			allOnAllOff: 10,
		},
	},
};
